/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AboutUsService } from "../aboutUs.service";
import { AboutUsCreateInput } from "./AboutUsCreateInput";
import { AboutUs } from "./AboutUs";
import { AboutUsFindManyArgs } from "./AboutUsFindManyArgs";
import { AboutUsWhereUniqueInput } from "./AboutUsWhereUniqueInput";
import { AboutUsUpdateInput } from "./AboutUsUpdateInput";

export class AboutUsControllerBase {
  constructor(protected readonly service: AboutUsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AboutUs })
  async createAboutUs(
    @common.Body() data: AboutUsCreateInput
  ): Promise<AboutUs> {
    return await this.service.createAboutUs({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AboutUs] })
  @ApiNestedQuery(AboutUsFindManyArgs)
  async aboutuses(@common.Req() request: Request): Promise<AboutUs[]> {
    const args = plainToClass(AboutUsFindManyArgs, request.query);
    return this.service.aboutuses({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AboutUs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aboutUs(
    @common.Param() params: AboutUsWhereUniqueInput
  ): Promise<AboutUs | null> {
    const result = await this.service.aboutUs({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AboutUs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAboutUs(
    @common.Param() params: AboutUsWhereUniqueInput,
    @common.Body() data: AboutUsUpdateInput
  ): Promise<AboutUs | null> {
    try {
      return await this.service.updateAboutUs({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          content: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AboutUs })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAboutUs(
    @common.Param() params: AboutUsWhereUniqueInput
  ): Promise<AboutUs | null> {
    try {
      return await this.service.deleteAboutUs({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          content: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
